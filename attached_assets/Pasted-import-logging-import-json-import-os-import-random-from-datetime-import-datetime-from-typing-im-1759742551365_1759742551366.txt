import logging
import json
import os
import random
from datetime import datetime
from typing import Dict, List

from PIL import Image, ImageDraw, ImageFont

from .. import config
from ..utils.twitter_api import TwitterClient
from ..utils import database as db

logger = logging.getLogger(__name__)

HASHTAGS = {
    "Business": ["#Business", "#Entrepreneurship", "#Leadership"],
    "Success": ["#Success", "#Goals", "#Mindset"],
    "Motivation": ["#Motivation", "#Inspiration", "#MondayMotivation"],
    "Technology": ["#Technology", "#AI", "#WebDevelopment"],
}


def _load_quotes() -> List[Dict]:
    if not os.path.exists(config.QUOTES_JSON):
        return []
    with open(config.QUOTES_JSON, "r", encoding="utf-8") as f:
        return json.load(f)


def _select_quote(quotes: List[Dict]) -> Dict:
    # Randomly choose a category rotation by day
    categories = ["Business", "Success", "Motivation", "Technology"]
    category = categories[datetime.now(config.IST_TZ).weekday() % len(categories)]
    pool = [q for q in quotes if q.get("category") == category]
    if not pool:
        pool = quotes
    return random.choice(pool) if pool else {}


def _create_image(quote: str, author: str) -> str:
    width, height = 1200, 675
    bg_color = random.choice([(25, 118, 210), (0, 121, 107), (123, 31, 162), (230, 81, 0)])
    img = Image.new("RGB", (width, height), bg_color)
    draw = ImageDraw.Draw(img)

    try:
        font_path = ImageFont.load_default()
        title_font = ImageFont.truetype("arial.ttf", 48)
        author_font = ImageFont.truetype("arial.ttf", 32)
    except Exception:
        title_font = ImageFont.load_default()
        author_font = ImageFont.load_default()

    margin = 80
    text = f"\"{quote}\""

    # Wrap text
    def wrap(text, font, max_width):
        words = text.split()
        lines, line = [], ""
        for w in words:
            test = f"{line} {w}".strip()
            if draw.textlength(test, font=font) <= max_width:
                line = test
            else:
                lines.append(line)
                line = w
        if line:
            lines.append(line)
        return "\n".join(lines)

    wrapped = wrap(text, title_font, width - 2 * margin)

    # Draw quote
    bbox = draw.multiline_textbbox((0, 0), wrapped, font=title_font, align="center")
    text_w, text_h = bbox[2] - bbox[0], bbox[3] - bbox[1]
    x, y = (width - text_w) / 2, (height - text_h) / 2 - 40
    draw.multiline_text((x, y), wrapped, font=title_font, fill=(255, 255, 255), align="center")

    # Draw author
    author_text = f"— {author}"
    a_w = draw.textlength(author_text, font=author_font)
    draw.text(((width - a_w) / 2, y + text_h + 20), author_text, font=author_font, fill=(255, 255, 255))

    out_path = os.path.join(config.MEDIA_DIR, f"quote_{int(datetime.utcnow().timestamp())}.jpg")
    img.save(out_path, format="JPEG", quality=90)
    return out_path


def post_daily_quote():
    quotes = _load_quotes()
    if not quotes:
        logger.warning("No quotes found in data/quotes.json")
        return
    q = _select_quote(quotes)
    if not q:
        return
    text = f"{q.get('quote')} — {q.get('author')}"

    # Hashtags
    ht = HASHTAGS.get(q.get("category"), [])
    hashtags = " ".join(ht)
    tweet_text = f"{text}\n\n{hashtags}"

    # Image
    img_path = _create_image(q.get("quote"), q.get("author"))

    # Post
    client = TwitterClient()
    media_id = client.upload_media(img_path)
    tweet_id = client.post_tweet(tweet_text[:280], media_ids=[media_id])

    db.log_tweet(tweet_id, tweet_text[:280], "quote", datetime.utcnow())
    logger.info(f"Posted quote tweet {tweet_id}")
